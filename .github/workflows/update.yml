on: repository_dispatch
name: Update dependencies
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: update dependencies
      run: mvn versions:use-latest-versions
    - name: fail if there are no dependency updates
      run: ! git diff --exit-code
  test:
    strategy:
      max-parallel: 1
    runs-on: ubuntu-latest
    needs: update
    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: update dependencies
      run: mvn versions:use-latest-versions
    - name: "setup files"
      run: |
        echo "jda-factory-class=io.github.jdiscordbots.nightdream.JDALoader" > $propFile;
        echo "jda-factory-method=load" >> $propFile
        echo "testing-prefix=nt." >> $propFile
        echo "testing-channel=$testChan" >> $propFile
        mkdir test
        echo "prefix=nt." >> test/Guild.properties
        echo "PixabayAPIKey=$pixabayAPIKey" >> test/NightDream.properties
      env:
        testChan: ${{ secrets.testingChannel }}
        propFile:  src/test/resources/jda-tests.properties
        pixabayAPIKey: ${{ secrets.pixabayAPIKey }}
    - name: "automated (feature) tests"
      run: "mvn -B test"
      env:
        ND_token: ${{secrets.botToken}}
        ND_admin: ${{ secrets.botAdmin }}
  Spotbugs:
    runs-on: ubuntu-latest
    needs: update
    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: run Spotbugs analysis
      run: mvn spotbugs:check
  commit:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
    - uses: actions/checkout@v1
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
       java-version: 1.8
    - name: update dependencies
      run: mvn versions:use-latest-versions
    - name: "setup git"
      run: |
        git remote add github https://$GITHUB_ACTOR:$GITHUB_TOKEN@github.com/$GITHUB_REPOSITORY.git
        git pull github ${GITHUB_REF} --ff-only
        git config --global user.email "${GITHUB_ACTOR}@github.com"
        git config --global user.name "${GITHUB_ACTOR}"
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: commit
      run: |
        git add pom.xml
        git commit -m "update dependencies"
    - name: push
      run: git push github HEAD:${GITHUB_REF}
  SonarCloud:
    needs: commit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: compile
        run: mvn verify -DskipTests=true
      - name: Run sonarqube
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar "-Dsonar.login=$SONAR_TOKEN"
             -Dsonar.host.url=https://sonarcloud.io/
  upload:
    runs-on: ubuntu-latest
    needs: commit
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: "setup user info"
        run: |
          git config --global user.email "${GITHUB_ACTOR}@github.com"
          git config --global user.name "${GITHUB_ACTOR}"
      - name: "clone Wiki"
        run: git clone https://github.com/$GITHUB_REPOSITORY.wiki.git wiki
      - name: "create JAR and copy it to the wiki"
        run: |
          mvn package -DskipTests=true
          cp target/NightDream.jar wiki/NightDream.jar
      - name: "Upload to wiki"
        run: |
          cd wiki
          git add NightDream.jar
          git commit -m "CI JAR deploy: `date`"
          git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY.wiki.git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
